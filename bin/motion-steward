#!/usr/bin/env ruby

require 'fastlane'
require 'motion-steward'

def options
  [
    {
      number: 1,
      name: "Research",
      method: :research,
      description: "Got an App idea? Use this option to if there are any similar apps and how much money they've made."
    },
    {
      number: 2,
      name: "Audit",
      method: :audit,
      description: "Goes through the current apps in your iTunes developer account and figures out all the things that will keep you from distributing your app to the App Store."
    },
    {
      number: 3,
      name: "Create Dev Profile",
      method: :create_dev_profile,
      description: "Creates a development profile for an App."
    },
    {
      number: 4,
      name: "Add Device",
      method: :add_device_to_profile,
      description: "Adds the currently connected iDevice to a development profile (so you can deploy to the device instead of having to use the simulator)."
    },
    {
      number: 5,
      name: "Download Dev Profile",
      method: :download_dev_profile,
      description: "Downloads the most recent version of a development profile."
    },
    {
      number: 6,
      name: "Exit",
      method: :exit_steward,
      description: "Exits Steward."
    }
  ]
end

def exit_steward
  exit(0)
end

def list_apps
  Spaceship.app.all.map do |a|
    puts "#{a.name}: #{a.bundle_id}"
  end
end

def go_to_apps
  puts 'opening https://developer.apple.com/account/ios/identifier/bundle/'
  system 'open https://developer.apple.com/account/ios/identifier/bundle/'
end

def gets
  STDIN.gets.chomp
end

def prompt_for_response message
  message += ' ' if message[-1] != ' '
  print message
  gets
end

def download_dev_profile
  login_if_needed
  puts "Here are the apps I've found without development profiles:\n\n"

  MotionSteward.development_profiles.each do |p|
    puts "- #{p.app.name}: #{p.app.bundle_id}"
  end

  selected_app = prompt_for_response "\nWhich app do you want to download the profile for?"
  to_path = 'development.mobileprovision'

  MotionSteward.download_development_profile selected_app, to_path
  puts "Development profile for #{selected_app} has been downloaded to #{to_path}.\n"
  audit
end

def research
  term = prompt_for_response "Enter a search term or app name, and I'll return what people will see when they search for that term in the App Store (along with some fancy data):"
  puts ''
  MotionSteward::AppStoreResearch.analyze(term)
end

def numbered_apps_without_development_profiles
  MotionSteward.apps_without_development_profiles.each_with_index.map do |p, i|
    { number: i + 1, app: p }
  end
end

def create_dev_profile
  login_if_needed
  puts "Here are the apps I've found without development profiles:\n\n"

  numbered_apps_without_development_profiles.each do |hash|
    puts "#{hash[:number]}. #{hash[:app].name} (#{hash[:app].bundle_id})"
  end

  number_or_name = prompt_for_response "\nWhich app do you want to create a profile for?"

  app_name = numbered_apps_without_development_profiles.find { |hash| hash[:number] == number_or_name.to_i || Regexp.new(number_or_name) =~ hash[:app].name.downcase }[:app].name

  MotionSteward.create_development_profile app_name

  puts "\n"

  audit
end

def add_device_to_profile
  login_if_needed
  puts "Here are the profiles I've found that do not have the currently connected device:\n\n"

  MotionSteward.development_profiles_without_device(MotionSteward.udid_of_connected_device).each do |p|
    puts " - #{p.app.name}'s development profile"
  end

  selected_app = prompt_for_response "\nWhich app's profile do you want to add the device to?"

  MotionSteward.add_device_to_app selected_app, MotionSteward.udid_of_connected_device
  puts "\n"
  audit
end

def login_if_needed
  stored_login = `cat ~/.motion-steward-login`.chomp
  if stored_login.length.zero?
    email = prompt_for_response 'First, we need to log into your Apple Developer account. I need your email:'
    system "echo #{email} >> ~/.motion-steward-login"
  else
    email = stored_login
  end

  Spaceship.login email
end

def audit
  login_if_needed
  MotionSteward.audit_device
  MotionSteward.audit_provisioning_profiles
end

def help_with_certificates
  production = Spaceship.certificate.all.find_all { |c| c.is_a? Spaceship::Portal::Certificate::Production }.first

  development = Spaceship.certificate.all.find_all { |c| c.is_a? Spaceship::Portal::Certificate::Development }.first

  if production.nil? or development.nil?
    puts "You need to create a Production and Development certificate. This script doesn't support that stuff yet."
    system "open https://developer.apple.com/account/ios/certificate/"
    exit(0)
  end

  [development, production]
end

def create_app
  puts <<~INSTRUCTIONS
  I need the name of your app. Here are some tips:

  - If you haven't done so, you should really run the research command before committing to a name for your app.
  - Using spaces is fine.
  - Using a hypen after the main app name (eg: "Metal Gear - Tactical Espionage") is fine.
  - Make the app name memorable because this is what people will use to find your app in the App Store.
  - Here are examples of BAD app names:
    - "Threes!" Why? Because it has an exclamation point (punctuation) in the main app name. Apps that use punctuation are hard to find.
    - "T.L.D.R. Reddit" Why? Because it has periods (punctuation) in the main app name. Apps that use punctuation are hard to find.
    - "Heroes Fighting" Why? Heroes is a saturated app keyword (there are many others). It'll make your app incredibly difficult to find.

  INSTRUCTIONS

  continue = false
  while !continue
    print "Pressure's on, what will you name your app?: "
    app_name = gets
    puts ""
    print 'Given the results above, do you want to change the name of your app? y/n: '
    continue = true if gets == 'n'
  end
  puts 'I need an app website/company website to generate an app ID. Examples: amirrajan.net, rubymotion.com'
  website = gets
  recommended_app_id = website.split('.').reverse.join '.'
  recommended_app_id += '.' + app_name.downcase.delete(' ')
  app_id = recommended_app_id
  puts "Alright, here is the app that I'll create for you: "
  puts app_name
  puts app_id
  puts 'Everything look good? y/n: '
  if gets == 'n'
    print 'What would you like the App ID to be? '
    app_id = gets
  end

  Spaceship.app.create!(bundle_id: app_id, name: app_name)

  puts "If all went well, [#{app_name}] has now been created. Select list_apps to continue."
end

continue = true

def find_option number_or_name
  options.find { |o| o[:number] == number_or_name.to_i || Regexp.new(number_or_name) =~ o[:name].downcase }
end

while continue
  puts ''
  puts 'Options:'
  puts ''
  options.map { |o| puts "#{o[:number]}. #{o[:name]}: #{o[:description]}\n\n" }

  print 'What would you like to do (choose from the list above): '

  input = gets

  o = (find_option input)

  if o
    system 'clear'
    send(o[:method])
  end
end
